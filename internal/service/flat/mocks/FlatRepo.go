// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "house-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// FlatRepo is an autogenerated mock type for the FlatRepo type
type FlatRepo struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: ctx, houseId, price, rooms
func (_m *FlatRepo) CreateFlat(ctx context.Context, houseId int, price int, rooms int) (*domain.Flat, error) {
	ret := _m.Called(ctx, houseId, price, rooms)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 *domain.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) (*domain.Flat, error)); ok {
		return rf(ctx, houseId, price, rooms)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) *domain.Flat); ok {
		r0 = rf(ctx, houseId, price, rooms)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(ctx, houseId, price, rooms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHouse provides a mock function with given fields: ctx, id
func (_m *FlatRepo) GetHouse(ctx context.Context, id int) ([]domain.Flat, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetHouse")
	}

	var r0 []domain.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]domain.Flat, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []domain.Flat); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlat provides a mock function with given fields: ctx, id, status
func (_m *FlatRepo) UpdateFlat(ctx context.Context, id int, status string) (*domain.Flat, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlat")
	}

	var r0 *domain.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (*domain.Flat, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *domain.Flat); ok {
		r0 = rf(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFlatRepo creates a new instance of FlatRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlatRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlatRepo {
	mock := &FlatRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
