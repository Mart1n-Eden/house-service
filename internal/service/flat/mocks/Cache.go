// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "house-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Cache) Delete(id string) {
	_m.Called(id)
}

// GetHouse provides a mock function with given fields: id
func (_m *Cache) GetHouse(id string) ([]domain.Flat, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetHouse")
	}

	var r0 []domain.Flat
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]domain.Flat, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Flat); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PutHouse provides a mock function with given fields: id, house
func (_m *Cache) PutHouse(id string, house []domain.Flat) error {
	ret := _m.Called(id, house)

	if len(ret) == 0 {
		panic("no return value specified for PutHouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []domain.Flat) error); ok {
		r0 = rf(id, house)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
